const {
    binary,
    enumLookup,
    numeric,
    onOff,
    temperature,
    deviceEndpoints,
} = require('zigbee-herdsman-converters/lib/modernExtend');

const definition = {
    zigbeeModel: ['MODKAM_Term'],
    model: 'MODKAM_Term',
    vendor: 'EfektaLab',
    description: '[MODKAM_Term](https://modkam.ru)',
    extend: [
        deviceEndpoints({endpoints: {'l1': 1, 'l2': 2, 'l3': 3, 'l4': 4}}),
        onOff({
            endpointNames: ['l1', 'l2', 'l3', 'l4'],
            powerOnBehavior: false,
			configureReporting: false,
        }),
        temperature({
            endpointNames: ['l1', 'l2', 'l3', 'l4'],
			reporting: undefined,
        }),
        binary({
            name: 'enable_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0220, type: 0x10},
            description: 'Enable Temperature Control',
            endpointName:'l1',
        }),
		binary({
            name: 'enable_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0220, type: 0x10},
            description: 'Enable Temperature Control',
            endpointName:'l2',
        }),
		binary({
            name: 'enable_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0220, type: 0x10},
            description: 'Enable Temperature Control',
            endpointName:'l3',
        }),
		binary({
            name: 'enable_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0220, type: 0x10},
            description: 'Enable Temperature Control',
            endpointName:'l4',
        }),
        binary({
            name: 'invert_logic_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0225, type: 0x10},
            description: 'NC - Normal, NO - Invert, Enable invert logic Temperature Control',
            endpointName:'l1',
        }),
		binary({
            name: 'invert_logic_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0225, type: 0x10},
            description: 'NC - Normal, NO - Invert, Enable invert logic Temperature Control',
            endpointName:'l2',
        }),
		binary({
            name: 'invert_logic_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0225, type: 0x10},
            description: 'NC - Normal, NO - Invert, Enable invert logic Temperature Control',
            endpointName:'l3',
        }),
		binary({
            name: 'invert_logic_temp',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0225, type: 0x10},
            description: 'NC - Normal, NO - Invert, Enable invert logic Temperature Control',
            endpointName:'l4',
        }),
        numeric({
            name: 'high_temp',
            unit: '°C',
            valueMin: -5,
            valueMax: 50,
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0221, type: 0x29},
            description: 'Setting High Temperature Border',
            endpointNames: ['l1', 'l2', 'l3', 'l4'],
        }),
        numeric({
            name: 'low_temp',
            unit: '°C',
            valueMin: -5,
            valueMax: 50,
            cluster: 'msTemperatureMeasurement',
            attribute: {ID: 0x0222, type: 0x29},
            description: 'Setting Low Temperature Border',
            endpointNames: ['l1', 'l2', 'l3', 'l4'],
        }),
        numeric({
            name: 'report_delay',
            unit: 'sec',
            valueMin: 1,
            valueMax: 360,
            cluster: 'genTime',
            attribute: {ID: 0x0201, type: 0x21},
            description: 'Adjust Report Delay. Setting the time in seconds, by default 15 seconds',
        }),
        binary({
            name: 'night_onoff',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'genTime',
            attribute: {ID: 0x0401, type: 0x10},
            description: 'Night mode',
        }),
        numeric({
            name: 'night_on',
            unit: 'Hr',
            valueMin: 0,
            valueMax: 23,
            cluster: 'genTime',
            attribute: {ID: 0x0405, type: 0x20},
            description: 'Night mode activation time',
        }),
        numeric({
            name: 'night_off',
            unit: 'Hr',
            valueMin: 0,
            valueMax: 23,
            cluster: 'genTime',
            attribute: {ID: 0x0406, type: 0x20},
            description: 'Night mode deactivation time',
        }),
        binary({
            name: 'alarm',
            valueOn: ['ON', 1],
            valueOff: ['OFF', 0],
            cluster: 'genTime',
            attribute: {ID: 0x0240, type: 0x10},
            description: 'Alarm',
        }),
    ],
};

module.exports = definition;